m = do
  v1 <- new
  v2 <- new

m' = do
  v2 <- getVar 2

m >> m' -- gives v2
m' >> m -- errors

v <- goal
scoped m1 <-- failed
--learn: assignment that m1 makes on v causes conflict. Learned clause: Assignment on v AND placing m1 causes conflict.
scoped m2 <-- taken
m2
if m1 is run, then...


(Cons * (Cons * (Cons 3 *))) -> m1 fails

K3 -> conflict
P 3 -> K 3
Q 3 -> K 3


concat [] X X
concat XS Y ZS -> concat (X : XS) Y (X : ZS)
v = concat 1 2 3 -> m1 conflict
learned clause: v = concat * * *
should be: goal = concat * * *
concat * * *

--meet the reads


Summary: (building on top of disjunction operators)
- [x] Identify the goal.
- [ ] When branch fails, track which parts of the goal caused the conflict.
- [ ] Learn the goal term (not! the concrete goal, just its structure) by, lattice speaking, meeting all the reads done on the goal for the conflict to occur.
- [ ] Put a propagator that, when this goal structure is active, prevents the previously failed branch from being unfolded.

Writing reasons:
Every variable has reasons attached. Reason is list of variables with threshold functions for iff-reads, together with the value that was written.
Add to state: a reason (List of iff-reads)
Add to variable writes: a reason with value written
conflict tracing:
  question: why value v passed threshold function tf
  algorithm: get all subsets of writes that together pass tf.
              For each subset: append the reasons.
              For each reason: Ask why the variable in the reason passed the threshold function from the reason.
              problems: cycle detection
                        further termination criterion (usually done with heuristics. Maybe stopping at the variables in the orig? so...fringe is pure orig. Other possibility: Search for reason until in goal term)
After conflict tracing: recreate the variables with threshold functions to be a term instead of concrete variables. Problem: Threshold functions would need to return which part of the lattice they actually read. (Can be aided by useful combinators, e.g. head which uses the left part of a Cons.)

Next Step:
  [x] Adding reasons to state
  [x] rewrite iff operator to write reasons to state
  [x] check lattice instance for PtrConts in Propagators.hs
  [ ] have reasons stored in variables
  [ ] rewrite write operator to write reasons into variables
